name: Move issue to Done on commit

on:
  push:
    branches:
      - '**'

jobs:
  move-issue:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Move Issue to Done
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          # -----------------------------
          # üîπ Configuration    
          # -----------------------------
          $token = $env:GITHUB_TOKEN
          $repoOwner = $env:REPO_OWNER
          $projectName = $env:REPO_NAME

          # -----------------------------
          # 0Ô∏è‚É£ R√©cup√©ration du message de commit
          # -----------------------------
          $commitMessage = git log -1 --pretty=%B

          # -----------------------------
          # 1Ô∏è‚É£ Extraction de l'issue number (closes #123)
          # -----------------------------
          $issueNumbers = @()
          $regex = [regex] "closes\s*#(\d+)"
          foreach ($match in $regex.Matches($commitMessage)) {
              $issueNumbers += [int]$match.Groups[1].Value
          }
          
          if ($issueNumbers.Count -eq 0) {
              Write-Host "Aucune r√©f√©rence d'issue trouv√©e dans le commit, arr√™t du script."
              exit 0
          } else {
              Write-Host "Issues trouv√©es dans le commit : $($issueNumbers -join ', ')"
              $issueNumber = $issueNumbers[0]
          }

          # -----------------------------
          # 2Ô∏è‚É£ R√©cup√©rer le repository
          # -----------------------------
          $queryRepos = '{
            viewer {
              repositories(first: 100, orderBy: {field: NAME, direction: ASC}) {
                nodes { name }
              }
            }
          }'

          $bodyRepos = @{ query = $queryRepos } | ConvertTo-Json -Compress
          $response = Invoke-RestMethod `
              -Uri "https://api.github.com/graphql" `
              -Method POST `
              -Headers @{ Authorization = "Bearer $token" } `
              -Body $bodyRepos `
              -ContentType "application/json"

          $filteredRepos = $response.data.viewer.repositories.nodes | Where-Object { $_.name -eq "$projectName" }
          if ($null -eq $filteredRepos -OR $filteredRepos.Count -eq 0) { throw "Le repository '$projectName' n'existe pas !" }
          if ($filteredRepos.Count -gt 1) { throw "Le repository '$projectName' existe plusieurs fois !" }

          $repo = $filteredRepos | Select-Object -First 1

          # -----------------------------
          # 3Ô∏è‚É£ R√©cup√©rer les projets attach√©s
          # -----------------------------
          $queryAttachedProjects = '{
            repository(owner: "' + $repoOwner + '", name: "' + $repo.name + '") {
              projectsV2(first: 50) {
                nodes { id number title }
              }
            }
          }'

          $bodyAttachedProjects = @{ query = $queryAttachedProjects } | ConvertTo-Json -Compress
          $response = Invoke-RestMethod `
              -Uri "https://api.github.com/graphql" `
              -Method POST `
              -Headers @{ Authorization = "Bearer $token" } `
              -Body $bodyAttachedProjects `
              -ContentType "application/json"

          $projects = $response.data.repository.projectsV2.nodes
          if ($null -eq $projects -OR $projects.Count -eq 0) { throw "Aucun projet attach√© !" }
          if ($projects.Count -gt 1) { throw "Plusieurs projets attach√©s, veuillez v√©rifier les doublons !" }

          $project = $projects | Select-Object -First 1

          # -----------------------------
          # 4Ô∏è‚É£ R√©cup√©rer les issues et les champs
          # -----------------------------
          $queryProjectIssues = '{
            repository(owner: "' + $repoOwner + '", name: "' + $repo.name + '") {
              projectV2(number: ' + $project.number + ') {
                id
                title
                items(first: 100) {
                  nodes {
                    id
                    content { ... on Issue { number title state url } }
                  }
                }
                fields(first: 10) {
                  nodes {
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options { id name }
                    }
                  }
                }
              }
            }
          }'

          $bodyProjectIssues = @{ query = $queryProjectIssues } | ConvertTo-Json -Compress
          $response = Invoke-RestMethod `
              -Uri "https://api.github.com/graphql" `
              -Method POST `
              -Headers @{ Authorization = "Bearer $token" } `
              -Body $bodyProjectIssues `
              -ContentType "application/json"

          $issue = $response.data.repository.projectV2.items.nodes | Where-Object { $_.content.number -eq $issueNumber } | Select-Object -First 1
          if ($null -eq $issue) { throw "Aucune issue #$issueNumber dans le projet '$($project.title)' !" }

          $fieldStatus = $response.data.repository.projectV2.fields.nodes | Where-Object { $_.name -eq "Status" } | Select-Object -First 1
          $optionInProgress = $fieldStatus.options | Where-Object { $_.name -eq "Done" } | Select-Object -First 1

          # -----------------------------
          # 5Ô∏è‚É£ Mutation GraphQL pour passer l'issue en In Progress
          # -----------------------------
          $mutation = "
          mutation {
            updateProjectV2ItemFieldValue(
              input: {
                projectId: `"$($project.id)`",
                itemId: `"$($issue.id)`",
                fieldId: `"$($fieldStatus.id)`",
                value: { singleSelectOptionId: `"$($optionInProgress.id)`" }
              }
            ) {
              projectV2Item { id }
            }
          }"

          $bodyMutation = @{ query = $mutation } | ConvertTo-Json -Compress
          $response = Invoke-RestMethod `
              -Uri "https://api.github.com/graphql" `
              -Method POST `
              -Headers @{ Authorization = "Bearer $token" } `
              -Body $bodyMutation `
              -ContentType "application/json"

          Write-Host "Issue #$issueNumber mise √† jour en 'Done' pour le projet '$($project.title)'."
