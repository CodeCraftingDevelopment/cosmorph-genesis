name: Move issue to correct status on commit

on:
  push:
    branches:
      - '**'

jobs:
  move-issue:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Move Issue to Correct Status
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          # -----------------------------
          # üîπ Configuration
          # -----------------------------
          $token = $env:GITHUB_TOKEN
          $repoOwner = $env:REPO_OWNER
          $projectName = $env:REPO_NAME
          $commitMessage = $env:COMMIT_MESSAGE

          # -----------------------------
          # 1Ô∏è‚É£ Extraction des issues
          # -----------------------------
          $issueRefs = @()
          $issueCloses = @()

          $regexRefs = [regex] "refs\s*#(\d+)"
          foreach ($match in $regexRefs.Matches($commitMessage)) {
              $issueRefs += [int]$match.Groups[1].Value
          }

          $regexCloses = [regex] "(closes|closed|fixes|fixed)\s*#(\d+)"
          foreach ($match in $regexCloses.Matches($commitMessage)) {
              $issueCloses += [int]$match.Groups[2].Value
          }

          $allIssues = $issueRefs + $issueCloses | Select-Object -Unique
          if ($allIssues.Count -eq 0) {
              Write-Host "Aucune r√©f√©rence d'issue trouv√©e dans le commit, arr√™t du script."
              exit 0
          } else {
              Write-Host "Issues trouv√©es : $($allIssues -join ', ')"
          }

          # -----------------------------
          # 2Ô∏è‚É£ R√©cup√©ration du repository
          # -----------------------------
          $queryRepos = '{ viewer { repositories(first: 100) { nodes { name } } } }'
          $bodyRepos = @{ query = $queryRepos } | ConvertTo-Json -Compress
          $response = Invoke-RestMethod `
              -Uri "https://api.github.com/graphql" `
              -Method POST `
              -Headers @{ Authorization = "Bearer $token" } `
              -Body $bodyRepos `
              -ContentType "application/json"

          $repo = $response.data.viewer.repositories.nodes | Where-Object { $_.name -eq "$projectName" } | Select-Object -First 1
          if ($null -eq $repo) { throw "Le repository '$projectName' n'existe pas !" }

          # -----------------------------
          # 3Ô∏è‚É£ R√©cup√©ration du projet
          # -----------------------------
          $queryProjects = '{ repository(owner: "' + $repoOwner + '", name: "' + $repo.name + '") { projectsV2(first: 50) { nodes { id number title } } } }'
          $bodyProjects = @{ query = $queryProjects } | ConvertTo-Json -Compress
          $response = Invoke-RestMethod `
              -Uri "https://api.github.com/graphql" `
              -Method POST `
              -Headers @{ Authorization = "Bearer $token" } `
              -Body $bodyProjects `
              -ContentType "application/json"

          $project = $response.data.repository.projectsV2.nodes | Select-Object -First 1
          if ($null -eq $project) { throw "Aucun projet attach√© !" }

          # -----------------------------
          # 4Ô∏è‚É£ R√©cup√©ration des items et champs
          # -----------------------------
          $queryDetails = '{ repository(owner: "' + $repoOwner + '", name: "' + $repo.name + '") { projectV2(number: ' + $project.number + ') { id title items(first: 100) { nodes { id content { ... on Issue { number title state url } } } } fields(first: 10) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }'
          $bodyDetails = @{ query = $queryDetails } | ConvertTo-Json -Compress
          $response = Invoke-RestMethod `
              -Uri "https://api.github.com/graphql" `
              -Method POST `
              -Headers @{ Authorization = "Bearer $token" } `
              -Body $bodyDetails `
              -ContentType "application/json"

          $items = $response.data.repository.projectV2.items.nodes
          $fieldStatus = $response.data.repository.projectV2.fields.nodes | Where-Object { $_.name -eq "Status" } | Select-Object -First 1
          if ($null -eq $fieldStatus) { throw "Champ 'Status' introuvable dans le projet." }

          # -----------------------------
          # 5Ô∏è‚É£ Mise √† jour des issues
          # -----------------------------
          foreach ($issueNumber in $allIssues) {
              $issue = $items | Where-Object { $_.content.number -eq $issueNumber } | Select-Object -First 1
              if ($null -eq $issue) {
                  Write-Host "‚ö†Ô∏è Issue #$issueNumber non trouv√©e dans le projet."
                  continue
              }

              if ($issueRefs -contains $issueNumber) {
                  $targetStatus = "In Progress"
              } elseif ($issueCloses -contains $issueNumber) {
                  $targetStatus = "Done"
              } else {
                  Write-Host "‚ö†Ô∏è Aucun statut d√©fini pour l'issue #$issueNumber"
                  continue
              }

              $option = $fieldStatus.options | Where-Object { $_.name -eq $targetStatus } | Select-Object -First 1
              if ($null -eq $option) {
                  Write-Host "‚ö†Ô∏è Option '$targetStatus' introuvable dans le champ 'Status'."
                  continue
              }

              $mutation = "mutation {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: `"$($project.id)`",
                    itemId: `"$($issue.id)`",
                    fieldId: `"$($fieldStatus.id)`",
                    value: { singleSelectOptionId: `"$($option.id)`" }
                  }
                ) {
                  projectV2Item { id }
                }
              }"

              $bodyMutation = @{ query = $mutation } | ConvertTo-Json -Compress
              $response = Invoke-RestMethod `
                  -Uri "https://api.github.com/graphql" `
                  -Method POST `
                  -Headers @{ Authorization = "Bearer $token" } `
                  -Body $bodyMutation `
                  -ContentType "application/json"

              Write-Host "‚úÖ Issue #$issueNumber mise √† jour en '$targetStatus'."
          }
