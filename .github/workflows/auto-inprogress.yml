name: Move issue to In Progress

on:
  push:
    branches:
      - '**'

jobs:
  move_issue:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Move issues via GitHub API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_ID: "PVT_kwHODXeC6c4BAqMI"
          STATUS_FIELD_ID: "PVTSSF_lAHODXeC6c4BAqMIzgzZahU"
          OPTION_ID: "47fc9ee4"
        run: |
          echo "==== D√©but du job ===="

          # R√©cup√®re les messages des commits
          COMMITS=$(git log ${{ github.event.before }}..${{ github.sha }} --pretty=%B 2>/dev/null || git log -1 --pretty=%B)

          echo "Commits trouv√©s :"
          echo "$COMMITS"

          # Extrait tous les "refs #ID"
          ISSUES=$(echo "$COMMITS" | grep -oE 'refs #[0-9]+' | tr -d 'refs #' | tr '\n' ' ')

          echo "Issues d√©tect√©es : $ISSUES"

          for ISSUE_ID in $ISSUES; do
            echo "------------------------------"
            echo "üîç Processing issue #$ISSUE_ID"
            echo "Repository: ${GITHUB_REPOSITORY_OWNER}/${GITHUB_REPOSITORY_NAME}"

            QUERY="query {
              repository(owner: \\\"${GITHUB_REPOSITORY_OWNER}\\\", name: \\\"${GITHUB_REPOSITORY_NAME}\\\") {
                issue(number: $ISSUE_ID) {
                  id
                  projectItems(first: 10) {
                    nodes {
                      id
                      project { id title }
                    }
                  }
                }
              }
            }"

            echo "GraphQL Query envoy√©e :"
            echo "$QUERY"

            RAW_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" \
              -X POST -d "{\"query\":\"$QUERY\"}" https://api.github.com/graphql)

            echo "R√©ponse brute de l'API :"
            echo "$RAW_RESPONSE" | jq .

            ITEM_ID=$(echo "$RAW_RESPONSE" | jq -r --arg PROJECT_ID "$PROJECT_ID" '.data.repository.issue.projectItems.nodes[] | select(.project.id == $PROJECT_ID) | .id')

            if [ -z "$ITEM_ID" ] || [ "$ITEM_ID" == "null" ]; then
              echo "‚ö†Ô∏è Aucun projet li√© trouv√© pour l‚Äôissue #$ISSUE_ID ‚Üí ignor√©."
              continue
            fi

            echo "‚úÖ Found project item: $ITEM_ID ‚Üí Moving to In Progress"

            MUTATION="mutation {
              updateProjectV2ItemFieldValue(input: {
                projectId: \\\"$PROJECT_ID\\\",
                itemId: \\\"$ITEM_ID\\\",
                fieldId: \\\"$STATUS_FIELD_ID\\\",
                value: { singleSelectOptionId: \\\"$OPTION_ID\\\" }
              }) {
                projectV2Item { id }
              }
            }"

            echo "Mutation envoy√©e :"
            echo "$MUTATION"

            RESULT=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" -X POST \
              -d "{\"query\":\"$MUTATION\"}" https://api.github.com/graphql)

            echo "R√©ponse de la mutation :"
            echo "$RESULT" | jq .
          done

          echo "==== Fin du job ===="
